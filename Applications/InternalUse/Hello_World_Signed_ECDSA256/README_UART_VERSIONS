NOTE: The ES17 has two versions of the UART IP.
One is the "new" UART.  Same as ME14/ME10/ME11, or at least close.
The other is the "Classic/Old" UART.  Same as ES06,ES08, etc. or at least close.

The "New" UART is enabled by default.  The "Old" UART can be enabled by writing
an 8 byte magic value to InfoBlock offset 0x10800190 and triggering a POR.
In addition, the InfoBlock shadow register copy hardware must be activated by
writing 8 byte values at 0x180, 0x188.

WARNING: USE THIS AT YOUR OWN RISK.  InfoBlock is ONE TIME PROGRAMMABLE!
If you use this script on silicon, you will not be able to reverse the writes.
In addition, if you run this on a tested/trimmed part, you may corrupt existing values.
Try not to brick the part.



*****************************************************************************
*****************************************************************************
*****************************************************************************
GDB script below to set magic OTP values for "Classic/Old" UART. (es17_enable_classic_uart)
*****************************************************************************
*****************************************************************************
*****************************************************************************


#----------------------------------------
# Memory-mapped registers
#----------------------------------------

#Base addresses
set variable $gcr_base_addr=0x40000000

set variable $fctl_base_addr=0x40029000
set variable $fctl_faddr=$fctl_base_addr+0x00
set variable $fctl_fckdiv=$fctl_base_addr+0x04
set variable $fctl_fcntl=$fctl_base_addr+0x08
set variable $fctl_acntl=$fctl_base_addr+0x40
set variable $fctl_fdata0=$fctl_base_addr+0x30
set variable $fctl_fdata1=$fctl_base_addr+0x34
set variable $fctl_fdata2=$fctl_base_addr+0x38
set variable $fctl_fdata3=$fctl_base_addr+0x3C

# arg0 = address
# arg1 = 32-bit data
define write_flash
# Unlock and Set width to 32 (bit 4 to one)
set *$fctl_fcntl=0x20000010
set *$fctl_faddr=$arg0
set *$fctl_fdata0=$arg1
set *$fctl_fcntl=0x20000011
end

define es08_otp_unlock
# Write acntl to unlock OTP
set {long}0x40029040=0x3a7f5ca3
set {long}0x40029040=0xa1e34f20
set {long}0x40029040=0x9608b2c1
end

# ES17 Enable Classic UART
define es17_enable_classic_uart
 # SCON register address
 set variable $scon_addr=$gcr_base_addr+0
 # Save old SCON value
 set variable $old_scon=*$scon_addr
 # Turn off encryption (bit 20) so we can access the information block
 set *$scon_addr = 0x020002

 es08_otp_unlock

 # Write value to switch from "New" to "Classic" UART

 # Write FMV (this value required to enable OTP to shadow register moves on POR)
 write_flash 0x00800018 0xffffa5a5
 write_flash 0x0080001C 0xffffffff
 # NBB header row, HEADER1 (for transfer?)
 write_flash 0x00800180 0x00070008
 write_flash 0x00800184 0x6ac00000
 # SICFG0/1 with zero (from Frank on Feb 1, 2019)
 write_flash 0x00800188 0x00000000
 write_flash 0x0080018C 0x00000000
 # Write SIR4/5 register (to enable Classic UART)
 write_flash 0x00800190 0x40004000
 write_flash 0x00800194 0xfcf9ffff
 
 es08_otp_lock
 # Restore SCON
 set *$scon_addr = $old_scon
end

